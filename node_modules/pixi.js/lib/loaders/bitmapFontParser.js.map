{"version":3,"sources":["../../src/loaders/bitmapFontParser.js"],"names":["parse","bitmapFontParser","resource","next","data","type","TYPE","XML","getElementsByTagName","length","getAttribute","xmlUrl","isDataUrl","path","dirname","url","baseUrl","charAt","replace","textureUrl","TextureCache","loadOptions","crossOrigin","loadType","LOAD_TYPE","IMAGE","metadata","imageMetadata","parentResource","add","name","res","texture","bitmapFont","registerFont"],"mappings":";;;QAagBA,K,GAAAA,K;;kBAKD,YACf;AACI,WAAO,SAASC,gBAAT,CAA0BC,QAA1B,EAAoCC,IAApC,EACP;AACI;AACA,YAAI,CAACD,SAASE,IAAV,IAAkBF,SAASG,IAAT,KAAkB,yBAASC,IAAT,CAAcC,GAAtD,EACA;AACIJ;;AAEA;AACH;;AAED;AACA,YAAID,SAASE,IAAT,CAAcI,oBAAd,CAAmC,MAAnC,EAA2CC,MAA3C,KAAsD,CAAtD,IACGP,SAASE,IAAT,CAAcI,oBAAd,CAAmC,MAAnC,EAA2CC,MAA3C,KAAsD,CADzD,IAEGP,SAASE,IAAT,CAAcI,oBAAd,CAAmC,MAAnC,EAA2C,CAA3C,EAA8CE,YAA9C,CAA2D,MAA3D,MAAuE,IAF9E,EAIA;AACIP;;AAEA;AACH;;AAED,YAAIQ,SAAS,CAACT,SAASU,SAAV,GAAsBC,KAAKC,OAAL,CAAaZ,SAASa,GAAtB,CAAtB,GAAmD,EAAhE;;AAEA,YAAIb,SAASU,SAAb,EACA;AACI,gBAAID,WAAW,GAAf,EACA;AACIA,yBAAS,EAAT;AACH;;AAED,gBAAI,KAAKK,OAAL,IAAgBL,MAApB,EACA;AACI;AACA,oBAAI,KAAKK,OAAL,CAAaC,MAAb,CAAoB,KAAKD,OAAL,CAAaP,MAAb,GAAsB,CAA1C,MAAiD,GAArD,EACA;AACIE,8BAAU,GAAV;AACH;AACJ;AACJ;;AAED;AACAA,iBAASA,OAAOO,OAAP,CAAe,KAAKF,OAApB,EAA6B,EAA7B,CAAT;;AAEA;AACA,YAAIL,UAAUA,OAAOM,MAAP,CAAcN,OAAOF,MAAP,GAAgB,CAA9B,MAAqC,GAAnD,EACA;AACIE,sBAAU,GAAV;AACH;;AAED,YAAMQ,aAAaR,SAAST,SAASE,IAAT,CAAcI,oBAAd,CAAmC,MAAnC,EAA2C,CAA3C,EAA8CE,YAA9C,CAA2D,MAA3D,CAA5B;;AAEA,YAAI,YAAMU,YAAN,CAAmBD,UAAnB,CAAJ,EACA;AACI;AACAnB,kBAAME,QAAN,EAAgB,YAAMkB,YAAN,CAAmBD,UAAnB,CAAhB;AACAhB;AACH,SALD,MAOA;AACI,gBAAMkB,cAAc;AAChBC,6BAAapB,SAASoB,WADN;AAEhBC,0BAAU,yBAASC,SAAT,CAAmBC,KAFb;AAGhBC,0BAAUxB,SAASwB,QAAT,CAAkBC,aAHZ;AAIhBC,gCAAgB1B;AAJA,aAApB;;AAOA;AACA,iBAAK2B,GAAL,CAAY3B,SAAS4B,IAArB,aAAmCX,UAAnC,EAA+CE,WAA/C,EAA4D,UAACU,GAAD,EAC5D;AACI/B,sBAAME,QAAN,EAAgB6B,IAAIC,OAApB;AACA7B;AACH,aAJD;AAKH;AACJ,KAzED;AA0EH,C;;AA9FD;;IAAYU,I;;AACZ;;AACA;;AACA;;;;AAEA;;;;;;;;AAQO,SAASb,KAAT,CAAeE,QAAf,EAAyB8B,OAAzB,EACP;AACI9B,aAAS+B,UAAT,GAAsB,mBAAWC,YAAX,CAAwBhC,SAASE,IAAjC,EAAuC4B,OAAvC,CAAtB;AACH","file":"bitmapFontParser.js","sourcesContent":["import * as path from 'path';\nimport { utils } from '../core';\nimport { Resource } from 'resource-loader';\nimport { BitmapText } from '../extras';\n\n/**\n * Register a BitmapText font from loader resource.\n *\n * @function parseBitmapFontData\n * @memberof PIXI.loaders\n * @param {PIXI.loaders.Resource} resource - Loader resource.\n * @param {PIXI.Texture} texture - Reference to texture.\n */\nexport function parse(resource, texture)\n{\n    resource.bitmapFont = BitmapText.registerFont(resource.data, texture);\n}\n\nexport default function ()\n{\n    return function bitmapFontParser(resource, next)\n    {\n        // skip if no data or not xml data\n        if (!resource.data || resource.type !== Resource.TYPE.XML)\n        {\n            next();\n\n            return;\n        }\n\n        // skip if not bitmap font data, using some silly duck-typing\n        if (resource.data.getElementsByTagName('page').length === 0\n            || resource.data.getElementsByTagName('info').length === 0\n            || resource.data.getElementsByTagName('info')[0].getAttribute('face') === null\n        )\n        {\n            next();\n\n            return;\n        }\n\n        let xmlUrl = !resource.isDataUrl ? path.dirname(resource.url) : '';\n\n        if (resource.isDataUrl)\n        {\n            if (xmlUrl === '.')\n            {\n                xmlUrl = '';\n            }\n\n            if (this.baseUrl && xmlUrl)\n            {\n                // if baseurl has a trailing slash then add one to xmlUrl so the replace works below\n                if (this.baseUrl.charAt(this.baseUrl.length - 1) === '/')\n                {\n                    xmlUrl += '/';\n                }\n            }\n        }\n\n        // remove baseUrl from xmlUrl\n        xmlUrl = xmlUrl.replace(this.baseUrl, '');\n\n        // if there is an xmlUrl now, it needs a trailing slash. Ensure that it does if the string isn't empty.\n        if (xmlUrl && xmlUrl.charAt(xmlUrl.length - 1) !== '/')\n        {\n            xmlUrl += '/';\n        }\n\n        const textureUrl = xmlUrl + resource.data.getElementsByTagName('page')[0].getAttribute('file');\n\n        if (utils.TextureCache[textureUrl])\n        {\n            // reuse existing texture\n            parse(resource, utils.TextureCache[textureUrl]);\n            next();\n        }\n        else\n        {\n            const loadOptions = {\n                crossOrigin: resource.crossOrigin,\n                loadType: Resource.LOAD_TYPE.IMAGE,\n                metadata: resource.metadata.imageMetadata,\n                parentResource: resource,\n            };\n\n            // load the texture for the font\n            this.add(`${resource.name}_image`, textureUrl, loadOptions, (res) =>\n            {\n                parse(resource, res.texture);\n                next();\n            });\n        }\n    };\n}\n"]}