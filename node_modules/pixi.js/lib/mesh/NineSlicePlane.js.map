{"version":3,"sources":["../../src/mesh/NineSlicePlane.js"],"names":["DEFAULT_BORDER_SIZE","NineSlicePlane","texture","leftWidth","topHeight","rightWidth","bottomHeight","_origWidth","orig","width","_origHeight","height","_width","_height","refresh","updateHorizontalVertices","vertices","_topHeight","_bottomHeight","updateVerticalVertices","_leftWidth","_rightWidth","_renderCanvas","renderer","context","globalAlpha","worldAlpha","setBlendMode","blendMode","transform","worldTransform","res","resolution","roundPixels","setTransform","a","b","c","d","tx","ty","base","_texture","baseTexture","textureSource","source","w","h","drawSegment","x1","y1","x2","y2","uvs","sw","sh","dw","dh","drawImage","_refresh","_uvw","_uvh","dirty","multiplyUvs","value"],"mappings":"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","file":"NineSlicePlane.js","sourcesContent":["import Plane from './Plane';\n\nconst DEFAULT_BORDER_SIZE = 10;\n\n/**\n * The NineSlicePlane allows you to stretch a texture using 9-slice scaling. The corners will remain unscaled (useful\n * for buttons with rounded corners for example) and the other areas will be scaled horizontally and or vertically\n *\n *```js\n * let Plane9 = new PIXI.NineSlicePlane(PIXI.Texture.fromImage('BoxWithRoundedCorners.png'), 15, 15, 15, 15);\n *  ```\n * <pre>\n *      A                          B\n *    +---+----------------------+---+\n *  C | 1 |          2           | 3 |\n *    +---+----------------------+---+\n *    |   |                      |   |\n *    | 4 |          5           | 6 |\n *    |   |                      |   |\n *    +---+----------------------+---+\n *  D | 7 |          8           | 9 |\n *    +---+----------------------+---+\n\n *  When changing this objects width and/or height:\n *     areas 1 3 7 and 9 will remain unscaled.\n *     areas 2 and 8 will be stretched horizontally\n *     areas 4 and 6 will be stretched vertically\n *     area 5 will be stretched both horizontally and vertically\n * </pre>\n *\n * @class\n * @extends PIXI.mesh.Plane\n * @memberof PIXI.mesh\n *\n */\nexport default class NineSlicePlane extends Plane\n{\n    /**\n     * @param {PIXI.Texture} texture - The texture to use on the NineSlicePlane.\n     * @param {int} [leftWidth=10] size of the left vertical bar (A)\n     * @param {int} [topHeight=10] size of the top horizontal bar (C)\n     * @param {int} [rightWidth=10] size of the right vertical bar (B)\n     * @param {int} [bottomHeight=10] size of the bottom horizontal bar (D)\n     */\n    constructor(texture, leftWidth, topHeight, rightWidth, bottomHeight)\n    {\n        super(texture, 4, 4);\n\n        this._origWidth = texture.orig.width;\n        this._origHeight = texture.orig.height;\n\n        /**\n         * The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n         *\n         * @member {number}\n         * @memberof PIXI.NineSlicePlane#\n         * @override\n         */\n        this._width = this._origWidth;\n\n        /**\n         * The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n         *\n         * @member {number}\n         * @memberof PIXI.NineSlicePlane#\n         * @override\n         */\n        this._height = this._origHeight;\n\n        /**\n         * The width of the left column (a)\n         *\n         * @member {number}\n         * @memberof PIXI.NineSlicePlane#\n         * @override\n         */\n        this.leftWidth = typeof leftWidth !== 'undefined' ? leftWidth : DEFAULT_BORDER_SIZE;\n\n        /**\n         * The width of the right column (b)\n         *\n         * @member {number}\n         * @memberof PIXI.NineSlicePlane#\n         * @override\n         */\n        this.rightWidth = typeof rightWidth !== 'undefined' ? rightWidth : DEFAULT_BORDER_SIZE;\n\n        /**\n         * The height of the top row (c)\n         *\n         * @member {number}\n         * @memberof PIXI.NineSlicePlane#\n         * @override\n         */\n        this.topHeight = typeof topHeight !== 'undefined' ? topHeight : DEFAULT_BORDER_SIZE;\n\n        /**\n         * The height of the bottom row (d)\n         *\n         * @member {number}\n         * @memberof PIXI.NineSlicePlane#\n         * @override\n         */\n        this.bottomHeight = typeof bottomHeight !== 'undefined' ? bottomHeight : DEFAULT_BORDER_SIZE;\n\n        this.refresh(true);\n    }\n\n    /**\n     * Updates the horizontal vertices.\n     *\n     */\n    updateHorizontalVertices()\n    {\n        const vertices = this.vertices;\n\n        vertices[9] = vertices[11] = vertices[13] = vertices[15] = this._topHeight;\n        vertices[17] = vertices[19] = vertices[21] = vertices[23] = this._height - this._bottomHeight;\n        vertices[25] = vertices[27] = vertices[29] = vertices[31] = this._height;\n    }\n\n    /**\n     * Updates the vertical vertices.\n     *\n     */\n    updateVerticalVertices()\n    {\n        const vertices = this.vertices;\n\n        vertices[2] = vertices[10] = vertices[18] = vertices[26] = this._leftWidth;\n        vertices[4] = vertices[12] = vertices[20] = vertices[28] = this._width - this._rightWidth;\n        vertices[6] = vertices[14] = vertices[22] = vertices[30] = this._width;\n    }\n\n    /**\n     * Renders the object using the Canvas renderer\n     *\n     * @private\n     * @param {PIXI.CanvasRenderer} renderer - The canvas renderer to render with.\n     */\n    _renderCanvas(renderer)\n    {\n        const context = renderer.context;\n\n        context.globalAlpha = this.worldAlpha;\n        renderer.setBlendMode(this.blendMode);\n\n        const transform = this.worldTransform;\n        const res = renderer.resolution;\n\n        if (renderer.roundPixels)\n        {\n            context.setTransform(\n                transform.a * res,\n                transform.b * res,\n                transform.c * res,\n                transform.d * res,\n                (transform.tx * res) | 0,\n                (transform.ty * res) | 0\n            );\n        }\n        else\n        {\n            context.setTransform(\n                transform.a * res,\n                transform.b * res,\n                transform.c * res,\n                transform.d * res,\n                transform.tx * res,\n                transform.ty * res\n            );\n        }\n\n        const base = this._texture.baseTexture;\n        const textureSource = base.source;\n        const w = base.width * base.resolution;\n        const h = base.height * base.resolution;\n\n        this.drawSegment(context, textureSource, w, h, 0, 1, 10, 11);\n        this.drawSegment(context, textureSource, w, h, 2, 3, 12, 13);\n        this.drawSegment(context, textureSource, w, h, 4, 5, 14, 15);\n        this.drawSegment(context, textureSource, w, h, 8, 9, 18, 19);\n        this.drawSegment(context, textureSource, w, h, 10, 11, 20, 21);\n        this.drawSegment(context, textureSource, w, h, 12, 13, 22, 23);\n        this.drawSegment(context, textureSource, w, h, 16, 17, 26, 27);\n        this.drawSegment(context, textureSource, w, h, 18, 19, 28, 29);\n        this.drawSegment(context, textureSource, w, h, 20, 21, 30, 31);\n    }\n\n    /**\n     * Renders one segment of the plane.\n     * to mimic the exact drawing behavior of stretching the image like WebGL does, we need to make sure\n     * that the source area is at least 1 pixel in size, otherwise nothing gets drawn when a slice size of 0 is used.\n     *\n     * @private\n     * @param {CanvasRenderingContext2D} context - The context to draw with.\n     * @param {CanvasImageSource} textureSource - The source to draw.\n     * @param {number} w - width of the texture\n     * @param {number} h - height of the texture\n     * @param {number} x1 - x index 1\n     * @param {number} y1 - y index 1\n     * @param {number} x2 - x index 2\n     * @param {number} y2 - y index 2\n     */\n    drawSegment(context, textureSource, w, h, x1, y1, x2, y2)\n    {\n        // otherwise you get weird results when using slices of that are 0 wide or high.\n        const uvs = this.uvs;\n        const vertices = this.vertices;\n\n        let sw = (uvs[x2] - uvs[x1]) * w;\n        let sh = (uvs[y2] - uvs[y1]) * h;\n        let dw = vertices[x2] - vertices[x1];\n        let dh = vertices[y2] - vertices[y1];\n\n        // make sure the source is at least 1 pixel wide and high, otherwise nothing will be drawn.\n        if (sw < 1)\n        {\n            sw = 1;\n        }\n\n        if (sh < 1)\n        {\n            sh = 1;\n        }\n\n        // make sure destination is at least 1 pixel wide and high, otherwise you get\n        // lines when rendering close to original size.\n        if (dw < 1)\n        {\n            dw = 1;\n        }\n\n        if (dh < 1)\n        {\n            dh = 1;\n        }\n\n        context.drawImage(textureSource, uvs[x1] * w, uvs[y1] * h, sw, sh, vertices[x1], vertices[y1], dw, dh);\n    }\n\n    /**\n     * The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n     *\n     * @member {number}\n     */\n    get width()\n    {\n        return this._width;\n    }\n\n    set width(value) // eslint-disable-line require-jsdoc\n    {\n        this._width = value;\n        this._refresh();\n    }\n\n    /**\n     * The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n     *\n     * @member {number}\n     */\n    get height()\n    {\n        return this._height;\n    }\n\n    set height(value) // eslint-disable-line require-jsdoc\n    {\n        this._height = value;\n        this._refresh();\n    }\n\n    /**\n     * The width of the left column\n     *\n     * @member {number}\n     */\n    get leftWidth()\n    {\n        return this._leftWidth;\n    }\n\n    set leftWidth(value) // eslint-disable-line require-jsdoc\n    {\n        this._leftWidth = value;\n        this._refresh();\n    }\n\n    /**\n     * The width of the right column\n     *\n     * @member {number}\n     */\n    get rightWidth()\n    {\n        return this._rightWidth;\n    }\n\n    set rightWidth(value) // eslint-disable-line require-jsdoc\n    {\n        this._rightWidth = value;\n        this._refresh();\n    }\n\n    /**\n     * The height of the top row\n     *\n     * @member {number}\n     */\n    get topHeight()\n    {\n        return this._topHeight;\n    }\n\n    set topHeight(value) // eslint-disable-line require-jsdoc\n    {\n        this._topHeight = value;\n        this._refresh();\n    }\n\n    /**\n     * The height of the bottom row\n     *\n     * @member {number}\n     */\n    get bottomHeight()\n    {\n        return this._bottomHeight;\n    }\n\n    set bottomHeight(value) // eslint-disable-line require-jsdoc\n    {\n        this._bottomHeight = value;\n        this._refresh();\n    }\n\n    /**\n     * Refreshes NineSlicePlane coords. All of them.\n     */\n    _refresh()\n    {\n        super._refresh();\n\n        const uvs = this.uvs;\n        const texture = this._texture;\n\n        this._origWidth = texture.orig.width;\n        this._origHeight = texture.orig.height;\n\n        const _uvw = 1.0 / this._origWidth;\n        const _uvh = 1.0 / this._origHeight;\n\n        uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;\n        uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;\n        uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;\n        uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;\n\n        uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;\n        uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - (_uvw * this._rightWidth);\n        uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;\n        uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - (_uvh * this._bottomHeight);\n\n        this.updateHorizontalVertices();\n        this.updateVerticalVertices();\n\n        this.dirty++;\n\n        this.multiplyUvs();\n    }\n}\n"]}