{"version":3,"sources":["../../src/extras/BitmapText.js"],"names":["core","BitmapText","text","style","_textWidth","_textHeight","_glyphs","_font","tint","undefined","align","name","size","font","_text","_maxWidth","_maxLineHeight","_anchor","dirty","updateText","data","fonts","scale","pos","Point","chars","lineWidths","prevCharCode","lastLineWidth","maxLineWidth","line","lastSpace","lastSpaceWidth","spacesRemoved","maxLineHeight","i","length","charCode","charCodeAt","test","charAt","push","Math","max","x","y","lineHeight","utils","removeItems","charData","kerning","texture","position","xOffset","yOffset","width","xAdvance","height","lineAlignOffsets","alignOffset","lenChars","c","Sprite","parent","addChild","removeChild","anchor","updateTransform","validate","containerUpdateTransform","getLocalBounds","registerFont","xml","info","getElementsByTagName","common","fileName","getAttribute","res","RESOLUTION","parseInt","letters","letter","textureRect","Rectangle","frame","Texture","baseTexture","kernings","first","second","amount","value","set","copy","split","slice","join","toString","Container"],"mappings":"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","file":"BitmapText.js","sourcesContent":["import * as core from '../core';\nimport ObservablePoint from '../core/math/ObservablePoint';\nimport { getResolutionOfUrl } from '../core/utils';\nimport settings from '../core/settings';\n\n/**\n * A BitmapText object will create a line or multiple lines of text using bitmap font. To\n * split a line you can use '\\n', '\\r' or '\\r\\n' in your string. You can generate the fnt files using:\n *\n * A BitmapText can only be created when the font is loaded\n *\n * ```js\n * // in this case the font is in a file called 'desyrel.fnt'\n * let bitmapText = new PIXI.extras.BitmapText(\"text using a fancy font!\", {font: \"35px Desyrel\", align: \"right\"});\n * ```\n *\n * http://www.angelcode.com/products/bmfont/ for windows or\n * http://www.bmglyph.com/ for mac.\n *\n * @class\n * @extends PIXI.Container\n * @memberof PIXI.extras\n */\nexport default class BitmapText extends core.Container\n{\n    /**\n     * @param {string} text - The copy that you would like the text to display\n     * @param {object} style - The style parameters\n     * @param {string|object} style.font - The font descriptor for the object, can be passed as a string of form\n     *      \"24px FontName\" or \"FontName\" or as an object with explicit name/size properties.\n     * @param {string} [style.font.name] - The bitmap font id\n     * @param {number} [style.font.size] - The size of the font in pixels, e.g. 24\n     * @param {string} [style.align='left'] - Alignment for multiline text ('left', 'center' or 'right'), does not affect\n     *      single line text\n     * @param {number} [style.tint=0xFFFFFF] - The tint color\n     */\n    constructor(text, style = {})\n    {\n        super();\n\n        /**\n         * Private tracker for the width of the overall text\n         *\n         * @member {number}\n         * @private\n         */\n        this._textWidth = 0;\n\n        /**\n         * Private tracker for the height of the overall text\n         *\n         * @member {number}\n         * @private\n         */\n        this._textHeight = 0;\n\n        /**\n         * Private tracker for the letter sprite pool.\n         *\n         * @member {PIXI.Sprite[]}\n         * @private\n         */\n        this._glyphs = [];\n\n        /**\n         * Private tracker for the current style.\n         *\n         * @member {object}\n         * @private\n         */\n        this._font = {\n            tint: style.tint !== undefined ? style.tint : 0xFFFFFF,\n            align: style.align || 'left',\n            name: null,\n            size: 0,\n        };\n\n        /**\n         * Private tracker for the current font.\n         *\n         * @member {object}\n         * @private\n         */\n        this.font = style.font; // run font setter\n\n        /**\n         * Private tracker for the current text.\n         *\n         * @member {string}\n         * @private\n         */\n        this._text = text;\n\n        /**\n         * The max width of this bitmap text in pixels. If the text provided is longer than the\n         * value provided, line breaks will be automatically inserted in the last whitespace.\n         * Disable by setting value to 0\n         *\n         * @member {number}\n         * @private\n         */\n        this._maxWidth = 0;\n\n        /**\n         * The max line height. This is useful when trying to use the total height of the Text,\n         * ie: when trying to vertically align.\n         *\n         * @member {number}\n         * @private\n         */\n        this._maxLineHeight = 0;\n\n        /**\n         * Text anchor. read-only\n         *\n         * @member {PIXI.ObservablePoint}\n         * @private\n         */\n        this._anchor = new ObservablePoint(() => { this.dirty = true; }, this, 0, 0);\n\n        /**\n         * The dirty state of this object.\n         *\n         * @member {boolean}\n         */\n        this.dirty = false;\n\n        this.updateText();\n    }\n\n    /**\n     * Renders text and updates it when needed\n     *\n     * @private\n     */\n    updateText()\n    {\n        const data = BitmapText.fonts[this._font.name];\n        const scale = this._font.size / data.size;\n        const pos = new core.Point();\n        const chars = [];\n        const lineWidths = [];\n\n        let prevCharCode = null;\n        let lastLineWidth = 0;\n        let maxLineWidth = 0;\n        let line = 0;\n        let lastSpace = -1;\n        let lastSpaceWidth = 0;\n        let spacesRemoved = 0;\n        let maxLineHeight = 0;\n\n        for (let i = 0; i < this.text.length; i++)\n        {\n            const charCode = this.text.charCodeAt(i);\n\n            if (/(\\s)/.test(this.text.charAt(i)))\n            {\n                lastSpace = i;\n                lastSpaceWidth = lastLineWidth;\n            }\n\n            if (/(?:\\r\\n|\\r|\\n)/.test(this.text.charAt(i)))\n            {\n                lineWidths.push(lastLineWidth);\n                maxLineWidth = Math.max(maxLineWidth, lastLineWidth);\n                line++;\n\n                pos.x = 0;\n                pos.y += data.lineHeight;\n                prevCharCode = null;\n                continue;\n            }\n\n            if (lastSpace !== -1 && this._maxWidth > 0 && pos.x * scale > this._maxWidth)\n            {\n                core.utils.removeItems(chars, lastSpace - spacesRemoved, i - lastSpace);\n                i = lastSpace;\n                lastSpace = -1;\n                ++spacesRemoved;\n\n                lineWidths.push(lastSpaceWidth);\n                maxLineWidth = Math.max(maxLineWidth, lastSpaceWidth);\n                line++;\n\n                pos.x = 0;\n                pos.y += data.lineHeight;\n                prevCharCode = null;\n                continue;\n            }\n\n            const charData = data.chars[charCode];\n\n            if (!charData)\n            {\n                continue;\n            }\n\n            if (prevCharCode && charData.kerning[prevCharCode])\n            {\n                pos.x += charData.kerning[prevCharCode];\n            }\n\n            chars.push({\n                texture: charData.texture,\n                line,\n                charCode,\n                position: new core.Point(pos.x + charData.xOffset, pos.y + charData.yOffset),\n            });\n            lastLineWidth = pos.x + (charData.texture.width + charData.xOffset);\n            pos.x += charData.xAdvance;\n            maxLineHeight = Math.max(maxLineHeight, (charData.yOffset + charData.texture.height));\n            prevCharCode = charCode;\n        }\n\n        lineWidths.push(lastLineWidth);\n        maxLineWidth = Math.max(maxLineWidth, lastLineWidth);\n\n        const lineAlignOffsets = [];\n\n        for (let i = 0; i <= line; i++)\n        {\n            let alignOffset = 0;\n\n            if (this._font.align === 'right')\n            {\n                alignOffset = maxLineWidth - lineWidths[i];\n            }\n            else if (this._font.align === 'center')\n            {\n                alignOffset = (maxLineWidth - lineWidths[i]) / 2;\n            }\n\n            lineAlignOffsets.push(alignOffset);\n        }\n\n        const lenChars = chars.length;\n        const tint = this.tint;\n\n        for (let i = 0; i < lenChars; i++)\n        {\n            let c = this._glyphs[i]; // get the next glyph sprite\n\n            if (c)\n            {\n                c.texture = chars[i].texture;\n            }\n            else\n            {\n                c = new core.Sprite(chars[i].texture);\n                this._glyphs.push(c);\n            }\n\n            c.position.x = (chars[i].position.x + lineAlignOffsets[chars[i].line]) * scale;\n            c.position.y = chars[i].position.y * scale;\n            c.scale.x = c.scale.y = scale;\n            c.tint = tint;\n\n            if (!c.parent)\n            {\n                this.addChild(c);\n            }\n        }\n\n        // remove unnecessary children.\n        for (let i = lenChars; i < this._glyphs.length; ++i)\n        {\n            this.removeChild(this._glyphs[i]);\n        }\n\n        this._textWidth = maxLineWidth * scale;\n        this._textHeight = (pos.y + data.lineHeight) * scale;\n\n        // apply anchor\n        if (this.anchor.x !== 0 || this.anchor.y !== 0)\n        {\n            for (let i = 0; i < lenChars; i++)\n            {\n                this._glyphs[i].x -= this._textWidth * this.anchor.x;\n                this._glyphs[i].y -= this._textHeight * this.anchor.y;\n            }\n        }\n        this._maxLineHeight = maxLineHeight * scale;\n    }\n\n    /**\n     * Updates the transform of this object\n     *\n     * @private\n     */\n    updateTransform()\n    {\n        this.validate();\n        this.containerUpdateTransform();\n    }\n\n    /**\n     * Validates text before calling parent's getLocalBounds\n     *\n     * @return {PIXI.Rectangle} The rectangular bounding area\n     */\n    getLocalBounds()\n    {\n        this.validate();\n\n        return super.getLocalBounds();\n    }\n\n    /**\n     * Updates text when needed\n     *\n     * @private\n     */\n    validate()\n    {\n        if (this.dirty)\n        {\n            this.updateText();\n            this.dirty = false;\n        }\n    }\n\n    /**\n     * The tint of the BitmapText object\n     *\n     * @member {number}\n     */\n    get tint()\n    {\n        return this._font.tint;\n    }\n\n    set tint(value) // eslint-disable-line require-jsdoc\n    {\n        this._font.tint = (typeof value === 'number' && value >= 0) ? value : 0xFFFFFF;\n\n        this.dirty = true;\n    }\n\n    /**\n     * The alignment of the BitmapText object\n     *\n     * @member {string}\n     * @default 'left'\n     */\n    get align()\n    {\n        return this._font.align;\n    }\n\n    set align(value) // eslint-disable-line require-jsdoc\n    {\n        this._font.align = value || 'left';\n\n        this.dirty = true;\n    }\n\n    /**\n     * The anchor sets the origin point of the text.\n     * The default is 0,0 this means the text's origin is the top left\n     * Setting the anchor to 0.5,0.5 means the text's origin is centered\n     * Setting the anchor to 1,1 would mean the text's origin point will be the bottom right corner\n     *\n     * @member {PIXI.Point | number}\n     */\n    get anchor()\n    {\n        return this._anchor;\n    }\n\n    set anchor(value) // eslint-disable-line require-jsdoc\n    {\n        if (typeof value === 'number')\n        {\n            this._anchor.set(value);\n        }\n        else\n        {\n            this._anchor.copy(value);\n        }\n    }\n\n    /**\n     * The font descriptor of the BitmapText object\n     *\n     * @member {string|object}\n     */\n    get font()\n    {\n        return this._font;\n    }\n\n    set font(value) // eslint-disable-line require-jsdoc\n    {\n        if (!value)\n        {\n            return;\n        }\n\n        if (typeof value === 'string')\n        {\n            value = value.split(' ');\n\n            this._font.name = value.length === 1 ? value[0] : value.slice(1).join(' ');\n            this._font.size = value.length >= 2 ? parseInt(value[0], 10) : BitmapText.fonts[this._font.name].size;\n        }\n        else\n        {\n            this._font.name = value.name;\n            this._font.size = typeof value.size === 'number' ? value.size : parseInt(value.size, 10);\n        }\n\n        this.dirty = true;\n    }\n\n    /**\n     * The text of the BitmapText object\n     *\n     * @member {string}\n     */\n    get text()\n    {\n        return this._text;\n    }\n\n    set text(value) // eslint-disable-line require-jsdoc\n    {\n        value = value.toString() || ' ';\n        if (this._text === value)\n        {\n            return;\n        }\n        this._text = value;\n        this.dirty = true;\n    }\n\n    /**\n     * The max width of this bitmap text in pixels. If the text provided is longer than the\n     * value provided, line breaks will be automatically inserted in the last whitespace.\n     * Disable by setting value to 0\n     *\n     * @member {number}\n     */\n    get maxWidth()\n    {\n        return this._maxWidth;\n    }\n\n    set maxWidth(value) // eslint-disable-line require-jsdoc\n    {\n        if (this._maxWidth === value)\n        {\n            return;\n        }\n        this._maxWidth = value;\n        this.dirty = true;\n    }\n\n    /**\n     * The max line height. This is useful when trying to use the total height of the Text,\n     * ie: when trying to vertically align.\n     *\n     * @member {number}\n     * @readonly\n     */\n    get maxLineHeight()\n    {\n        this.validate();\n\n        return this._maxLineHeight;\n    }\n\n    /**\n     * The width of the overall text, different from fontSize,\n     * which is defined in the style object\n     *\n     * @member {number}\n     * @readonly\n     */\n    get textWidth()\n    {\n        this.validate();\n\n        return this._textWidth;\n    }\n\n    /**\n     * The height of the overall text, different from fontSize,\n     * which is defined in the style object\n     *\n     * @member {number}\n     * @readonly\n     */\n    get textHeight()\n    {\n        this.validate();\n\n        return this._textHeight;\n    }\n\n    /**\n     * Register a bitmap font with data and a texture.\n     *\n     * @static\n     * @param {XMLDocument} xml - The XML document data.\n     * @param {PIXI.Texture} texture - Texture with all symbols.\n     * @return {Object} Result font object with font, size, lineHeight and char fields.\n     */\n    static registerFont(xml, texture)\n    {\n        const data = {};\n        const info = xml.getElementsByTagName('info')[0];\n        const common = xml.getElementsByTagName('common')[0];\n        const fileName = xml.getElementsByTagName('page')[0].getAttribute('file');\n        const res = getResolutionOfUrl(fileName, settings.RESOLUTION);\n\n        data.font = info.getAttribute('face');\n        data.size = parseInt(info.getAttribute('size'), 10);\n        data.lineHeight = parseInt(common.getAttribute('lineHeight'), 10) / res;\n        data.chars = {};\n\n        // parse letters\n        const letters = xml.getElementsByTagName('char');\n\n        for (let i = 0; i < letters.length; i++)\n        {\n            const letter = letters[i];\n            const charCode = parseInt(letter.getAttribute('id'), 10);\n\n            const textureRect = new core.Rectangle(\n                (parseInt(letter.getAttribute('x'), 10) / res) + (texture.frame.x / res),\n                (parseInt(letter.getAttribute('y'), 10) / res) + (texture.frame.y / res),\n                parseInt(letter.getAttribute('width'), 10) / res,\n                parseInt(letter.getAttribute('height'), 10) / res\n            );\n\n            data.chars[charCode] = {\n                xOffset: parseInt(letter.getAttribute('xoffset'), 10) / res,\n                yOffset: parseInt(letter.getAttribute('yoffset'), 10) / res,\n                xAdvance: parseInt(letter.getAttribute('xadvance'), 10) / res,\n                kerning: {},\n                texture: new core.Texture(texture.baseTexture, textureRect),\n\n            };\n        }\n\n        // parse kernings\n        const kernings = xml.getElementsByTagName('kerning');\n\n        for (let i = 0; i < kernings.length; i++)\n        {\n            const kerning = kernings[i];\n            const first = parseInt(kerning.getAttribute('first'), 10) / res;\n            const second = parseInt(kerning.getAttribute('second'), 10) / res;\n            const amount = parseInt(kerning.getAttribute('amount'), 10) / res;\n\n            if (data.chars[second])\n            {\n                data.chars[second].kerning[first] = amount;\n            }\n        }\n\n        // I'm leaving this as a temporary fix so we can test the bitmap fonts in v3\n        // but it's very likely to change\n        BitmapText.fonts[data.font] = data;\n\n        return data;\n    }\n}\n\nBitmapText.fonts = {};\n"]}