{"version":3,"sources":["../../../../src/core/math/shapes/Rectangle.js"],"names":["Rectangle","x","y","width","height","Number","type","RECT","clone","copy","rectangle","contains","pad","paddingX","paddingY","fit","enlarge","x1","Math","min","x2","max","y1","y2"],"mappings":"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","file":"Rectangle.js","sourcesContent":["import { SHAPES } from '../../const';\n\n/**\n * Rectangle object is an area defined by its position, as indicated by its top-left corner\n * point (x, y) and by its width and its height.\n *\n * @class\n * @memberof PIXI\n */\nexport default class Rectangle\n{\n    /**\n     * @param {number} [x=0] - The X coordinate of the upper-left corner of the rectangle\n     * @param {number} [y=0] - The Y coordinate of the upper-left corner of the rectangle\n     * @param {number} [width=0] - The overall width of this rectangle\n     * @param {number} [height=0] - The overall height of this rectangle\n     */\n    constructor(x = 0, y = 0, width = 0, height = 0)\n    {\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.x = Number(x);\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.y = Number(y);\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.width = Number(width);\n\n        /**\n         * @member {number}\n         * @default 0\n         */\n        this.height = Number(height);\n\n        /**\n         * The type of the object, mainly used to avoid `instanceof` checks\n         *\n         * @member {number}\n         * @readOnly\n         * @default PIXI.SHAPES.RECT\n         * @see PIXI.SHAPES\n         */\n        this.type = SHAPES.RECT;\n    }\n\n    /**\n     * returns the left edge of the rectangle\n     *\n     * @member {number}\n     */\n    get left()\n    {\n        return this.x;\n    }\n\n    /**\n     * returns the right edge of the rectangle\n     *\n     * @member {number}\n     */\n    get right()\n    {\n        return this.x + this.width;\n    }\n\n    /**\n     * returns the top edge of the rectangle\n     *\n     * @member {number}\n     */\n    get top()\n    {\n        return this.y;\n    }\n\n    /**\n     * returns the bottom edge of the rectangle\n     *\n     * @member {number}\n     */\n    get bottom()\n    {\n        return this.y + this.height;\n    }\n\n    /**\n     * A constant empty rectangle.\n     *\n     * @static\n     * @constant\n     */\n    static get EMPTY()\n    {\n        return new Rectangle(0, 0, 0, 0);\n    }\n\n    /**\n     * Creates a clone of this Rectangle\n     *\n     * @return {PIXI.Rectangle} a copy of the rectangle\n     */\n    clone()\n    {\n        return new Rectangle(this.x, this.y, this.width, this.height);\n    }\n\n    /**\n     * Copies another rectangle to this one.\n     *\n     * @param {PIXI.Rectangle} rectangle - The rectangle to copy.\n     * @return {PIXI.Rectangle} Returns itself.\n     */\n    copy(rectangle)\n    {\n        this.x = rectangle.x;\n        this.y = rectangle.y;\n        this.width = rectangle.width;\n        this.height = rectangle.height;\n\n        return this;\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this Rectangle\n     *\n     * @param {number} x - The X coordinate of the point to test\n     * @param {number} y - The Y coordinate of the point to test\n     * @return {boolean} Whether the x/y coordinates are within this Rectangle\n     */\n    contains(x, y)\n    {\n        if (this.width <= 0 || this.height <= 0)\n        {\n            return false;\n        }\n\n        if (x >= this.x && x < this.x + this.width)\n        {\n            if (y >= this.y && y < this.y + this.height)\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Pads the rectangle making it grow in all directions.\n     *\n     * @param {number} paddingX - The horizontal padding amount.\n     * @param {number} [paddingY] - The vertical padding amount.\n     */\n    pad(paddingX, paddingY)\n    {\n        paddingX = paddingX || 0;\n        paddingY = paddingY || ((paddingY !== 0) ? paddingX : 0);\n\n        this.x -= paddingX;\n        this.y -= paddingY;\n\n        this.width += paddingX * 2;\n        this.height += paddingY * 2;\n    }\n\n    /**\n     * Fits this rectangle around the passed one.\n     *\n     * @param {PIXI.Rectangle} rectangle - The rectangle to fit.\n     */\n    fit(rectangle)\n    {\n        if (this.x < rectangle.x)\n        {\n            this.width += this.x;\n            if (this.width < 0)\n            {\n                this.width = 0;\n            }\n\n            this.x = rectangle.x;\n        }\n\n        if (this.y < rectangle.y)\n        {\n            this.height += this.y;\n            if (this.height < 0)\n            {\n                this.height = 0;\n            }\n            this.y = rectangle.y;\n        }\n\n        if (this.x + this.width > rectangle.x + rectangle.width)\n        {\n            this.width = rectangle.width - this.x;\n            if (this.width < 0)\n            {\n                this.width = 0;\n            }\n        }\n\n        if (this.y + this.height > rectangle.y + rectangle.height)\n        {\n            this.height = rectangle.height - this.y;\n            if (this.height < 0)\n            {\n                this.height = 0;\n            }\n        }\n    }\n\n    /**\n     * Enlarges this rectangle to include the passed rectangle.\n     *\n     * @param {PIXI.Rectangle} rectangle - The rectangle to include.\n     */\n    enlarge(rectangle)\n    {\n        const x1 = Math.min(this.x, rectangle.x);\n        const x2 = Math.max(this.x + this.width, rectangle.x + rectangle.width);\n        const y1 = Math.min(this.y, rectangle.y);\n        const y2 = Math.max(this.y + this.height, rectangle.y + rectangle.height);\n\n        this.x = x1;\n        this.width = x2 - x1;\n        this.y = y1;\n        this.height = y2 - y1;\n    }\n}\n"]}