{"version":3,"sources":["../../../../../src/core/graphics/webgl/utils/buildLine.js"],"names":["graphicsData","webGLData","webGLDataNativeLines","nativeLines","buildNativeLine","buildLine","points","length","firstPoint","lastPoint","x","y","slice","pop","midPointX","midPointY","unshift","push","verts","indices","indexCount","indexStart","width","lineWidth","color","lineColor","alpha","lineAlpha","r","g","b","p1x","p1y","p2x","p2y","p3x","p3y","perpx","perpy","perp2x","perp2y","perp3x","perp3y","dist","Math","sqrt","i","a1","b1","c1","a2","b2","c2","denom","abs","px","py","pdist"],"mappings":"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","file":"buildLine.js","sourcesContent":["import { Point } from '../../../math';\nimport { hex2rgb } from '../../../utils';\n\n/**\n * Builds a line to draw\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {object} webGLData - an object containing all the webGL-specific information to create this shape\n * @param {object} webGLDataNativeLines - an object containing all the webGL-specific information to create nativeLines\n */\nexport default function (graphicsData, webGLData, webGLDataNativeLines)\n{\n    if (graphicsData.nativeLines)\n    {\n        buildNativeLine(graphicsData, webGLDataNativeLines);\n    }\n    else\n    {\n        buildLine(graphicsData, webGLData);\n    }\n}\n\n/**\n * Builds a line to draw using the poligon method.\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {object} webGLData - an object containing all the webGL-specific information to create this shape\n */\nfunction buildLine(graphicsData, webGLData)\n{\n    // TODO OPTIMISE!\n    let points = graphicsData.points;\n\n    if (points.length === 0)\n    {\n        return;\n    }\n    // if the line width is an odd number add 0.5 to align to a whole pixel\n    // commenting this out fixes #711 and #1620\n    // if (graphicsData.lineWidth%2)\n    // {\n    //     for (i = 0; i < points.length; i++)\n    //     {\n    //         points[i] += 0.5;\n    //     }\n    // }\n\n    // get first and last point.. figure out the middle!\n    const firstPoint = new Point(points[0], points[1]);\n    let lastPoint = new Point(points[points.length - 2], points[points.length - 1]);\n\n    // if the first point is the last point - gonna have issues :)\n    if (firstPoint.x === lastPoint.x && firstPoint.y === lastPoint.y)\n    {\n        // need to clone as we are going to slightly modify the shape..\n        points = points.slice();\n\n        points.pop();\n        points.pop();\n\n        lastPoint = new Point(points[points.length - 2], points[points.length - 1]);\n\n        const midPointX = lastPoint.x + ((firstPoint.x - lastPoint.x) * 0.5);\n        const midPointY = lastPoint.y + ((firstPoint.y - lastPoint.y) * 0.5);\n\n        points.unshift(midPointX, midPointY);\n        points.push(midPointX, midPointY);\n    }\n\n    const verts = webGLData.points;\n    const indices = webGLData.indices;\n    const length = points.length / 2;\n    let indexCount = points.length;\n    let indexStart = verts.length / 6;\n\n    // DRAW the Line\n    const width = graphicsData.lineWidth / 2;\n\n    // sort color\n    const color = hex2rgb(graphicsData.lineColor);\n    const alpha = graphicsData.lineAlpha;\n    const r = color[0] * alpha;\n    const g = color[1] * alpha;\n    const b = color[2] * alpha;\n\n    let p1x = points[0];\n    let p1y = points[1];\n    let p2x = points[2];\n    let p2y = points[3];\n    let p3x = 0;\n    let p3y = 0;\n\n    let perpx = -(p1y - p2y);\n    let perpy = p1x - p2x;\n    let perp2x = 0;\n    let perp2y = 0;\n    let perp3x = 0;\n    let perp3y = 0;\n\n    let dist = Math.sqrt((perpx * perpx) + (perpy * perpy));\n\n    perpx /= dist;\n    perpy /= dist;\n    perpx *= width;\n    perpy *= width;\n\n    // start\n    verts.push(\n        p1x - perpx,\n        p1y - perpy,\n        r, g, b, alpha\n    );\n\n    verts.push(\n        p1x + perpx,\n        p1y + perpy,\n        r, g, b, alpha\n    );\n\n    for (let i = 1; i < length - 1; ++i)\n    {\n        p1x = points[(i - 1) * 2];\n        p1y = points[((i - 1) * 2) + 1];\n\n        p2x = points[i * 2];\n        p2y = points[(i * 2) + 1];\n\n        p3x = points[(i + 1) * 2];\n        p3y = points[((i + 1) * 2) + 1];\n\n        perpx = -(p1y - p2y);\n        perpy = p1x - p2x;\n\n        dist = Math.sqrt((perpx * perpx) + (perpy * perpy));\n        perpx /= dist;\n        perpy /= dist;\n        perpx *= width;\n        perpy *= width;\n\n        perp2x = -(p2y - p3y);\n        perp2y = p2x - p3x;\n\n        dist = Math.sqrt((perp2x * perp2x) + (perp2y * perp2y));\n        perp2x /= dist;\n        perp2y /= dist;\n        perp2x *= width;\n        perp2y *= width;\n\n        const a1 = (-perpy + p1y) - (-perpy + p2y);\n        const b1 = (-perpx + p2x) - (-perpx + p1x);\n        const c1 = ((-perpx + p1x) * (-perpy + p2y)) - ((-perpx + p2x) * (-perpy + p1y));\n        const a2 = (-perp2y + p3y) - (-perp2y + p2y);\n        const b2 = (-perp2x + p2x) - (-perp2x + p3x);\n        const c2 = ((-perp2x + p3x) * (-perp2y + p2y)) - ((-perp2x + p2x) * (-perp2y + p3y));\n\n        let denom = (a1 * b2) - (a2 * b1);\n\n        if (Math.abs(denom) < 0.1)\n        {\n            denom += 10.1;\n            verts.push(\n                p2x - perpx,\n                p2y - perpy,\n                r, g, b, alpha\n            );\n\n            verts.push(\n                p2x + perpx,\n                p2y + perpy,\n                r, g, b, alpha\n            );\n\n            continue;\n        }\n\n        const px = ((b1 * c2) - (b2 * c1)) / denom;\n        const py = ((a2 * c1) - (a1 * c2)) / denom;\n        const pdist = ((px - p2x) * (px - p2x)) + ((py - p2y) * (py - p2y));\n\n        if (pdist > (196 * width * width))\n        {\n            perp3x = perpx - perp2x;\n            perp3y = perpy - perp2y;\n\n            dist = Math.sqrt((perp3x * perp3x) + (perp3y * perp3y));\n            perp3x /= dist;\n            perp3y /= dist;\n            perp3x *= width;\n            perp3y *= width;\n\n            verts.push(p2x - perp3x, p2y - perp3y);\n            verts.push(r, g, b, alpha);\n\n            verts.push(p2x + perp3x, p2y + perp3y);\n            verts.push(r, g, b, alpha);\n\n            verts.push(p2x - perp3x, p2y - perp3y);\n            verts.push(r, g, b, alpha);\n\n            indexCount++;\n        }\n        else\n        {\n            verts.push(px, py);\n            verts.push(r, g, b, alpha);\n\n            verts.push(p2x - (px - p2x), p2y - (py - p2y));\n            verts.push(r, g, b, alpha);\n        }\n    }\n\n    p1x = points[(length - 2) * 2];\n    p1y = points[((length - 2) * 2) + 1];\n\n    p2x = points[(length - 1) * 2];\n    p2y = points[((length - 1) * 2) + 1];\n\n    perpx = -(p1y - p2y);\n    perpy = p1x - p2x;\n\n    dist = Math.sqrt((perpx * perpx) + (perpy * perpy));\n    perpx /= dist;\n    perpy /= dist;\n    perpx *= width;\n    perpy *= width;\n\n    verts.push(p2x - perpx, p2y - perpy);\n    verts.push(r, g, b, alpha);\n\n    verts.push(p2x + perpx, p2y + perpy);\n    verts.push(r, g, b, alpha);\n\n    indices.push(indexStart);\n\n    for (let i = 0; i < indexCount; ++i)\n    {\n        indices.push(indexStart++);\n    }\n\n    indices.push(indexStart - 1);\n}\n\n/**\n * Builds a line to draw using the gl.drawArrays(gl.LINES) method\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {object} webGLData - an object containing all the webGL-specific information to create this shape\n */\nfunction buildNativeLine(graphicsData, webGLData)\n{\n    let i = 0;\n    const points = graphicsData.points;\n\n    if (points.length === 0) return;\n\n    const verts = webGLData.points;\n    const length = points.length / 2;\n\n    // sort color\n    const color = hex2rgb(graphicsData.lineColor);\n    const alpha = graphicsData.lineAlpha;\n    const r = color[0] * alpha;\n    const g = color[1] * alpha;\n    const b = color[2] * alpha;\n\n    for (i = 1; i < length; i++)\n    {\n        const p1x = points[(i - 1) * 2];\n        const p1y = points[((i - 1) * 2) + 1];\n\n        const p2x = points[i * 2];\n        const p2y = points[(i * 2) + 1];\n\n        verts.push(p1x, p1y);\n        verts.push(r, g, b, alpha);\n\n        verts.push(p2x, p2y);\n        verts.push(r, g, b, alpha);\n    }\n}\n"]}