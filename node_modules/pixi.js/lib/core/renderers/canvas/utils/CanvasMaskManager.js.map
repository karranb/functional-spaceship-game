{"version":3,"sources":["../../../../../src/core/renderers/canvas/utils/CanvasMaskManager.js"],"names":["CanvasMaskManager","renderer","pushMask","maskData","context","save","cacheAlpha","alpha","transform","worldTransform","resolution","setTransform","a","b","c","d","tx","ty","_texture","renderGraphicsShape","clip","worldAlpha","graphics","len","graphicsData","length","beginPath","i","data","shape","type","POLY","points","moveTo","j","lineTo","closePath","RECT","rect","x","y","width","height","CIRC","arc","radius","Math","PI","ELIP","w","h","kappa","ox","oy","xe","ye","xm","ym","bezierCurveTo","RREC","rx","ry","maxRadius","min","quadraticCurveTo","popMask","restore","invalidateBlendMode","destroy"],"mappings":"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","file":"CanvasMaskManager.js","sourcesContent":["import { SHAPES } from '../../../const';\n\n/**\n * A set of functions used to handle masking.\n *\n * @class\n * @memberof PIXI\n */\nexport default class CanvasMaskManager\n{\n    /**\n     * @param {PIXI.CanvasRenderer} renderer - The canvas renderer.\n     */\n    constructor(renderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /**\n     * This method adds it to the current stack of masks.\n     *\n     * @param {object} maskData - the maskData that will be pushed\n     */\n    pushMask(maskData)\n    {\n        const renderer = this.renderer;\n\n        renderer.context.save();\n\n        const cacheAlpha = maskData.alpha;\n        const transform = maskData.transform.worldTransform;\n        const resolution = renderer.resolution;\n\n        renderer.context.setTransform(\n            transform.a * resolution,\n            transform.b * resolution,\n            transform.c * resolution,\n            transform.d * resolution,\n            transform.tx * resolution,\n            transform.ty * resolution\n        );\n\n        // TODO suport sprite alpha masks??\n        // lots of effort required. If demand is great enough..\n        if (!maskData._texture)\n        {\n            this.renderGraphicsShape(maskData);\n            renderer.context.clip();\n        }\n\n        maskData.worldAlpha = cacheAlpha;\n    }\n\n    /**\n     * Renders a PIXI.Graphics shape.\n     *\n     * @param {PIXI.Graphics} graphics - The object to render.\n     */\n    renderGraphicsShape(graphics)\n    {\n        const context = this.renderer.context;\n        const len = graphics.graphicsData.length;\n\n        if (len === 0)\n        {\n            return;\n        }\n\n        context.beginPath();\n\n        for (let i = 0; i < len; i++)\n        {\n            const data = graphics.graphicsData[i];\n            const shape = data.shape;\n\n            if (data.type === SHAPES.POLY)\n            {\n                const points = shape.points;\n\n                context.moveTo(points[0], points[1]);\n\n                for (let j = 1; j < points.length / 2; j++)\n                {\n                    context.lineTo(points[j * 2], points[(j * 2) + 1]);\n                }\n\n                // if the first and last point are the same close the path - much neater :)\n                if (points[0] === points[points.length - 2] && points[1] === points[points.length - 1])\n                {\n                    context.closePath();\n                }\n            }\n            else if (data.type === SHAPES.RECT)\n            {\n                context.rect(shape.x, shape.y, shape.width, shape.height);\n                context.closePath();\n            }\n            else if (data.type === SHAPES.CIRC)\n            {\n                // TODO - need to be Undefined!\n                context.arc(shape.x, shape.y, shape.radius, 0, 2 * Math.PI);\n                context.closePath();\n            }\n            else if (data.type === SHAPES.ELIP)\n            {\n                // ellipse code taken from: http://stackoverflow.com/questions/2172798/how-to-draw-an-oval-in-html5-canvas\n\n                const w = shape.width * 2;\n                const h = shape.height * 2;\n\n                const x = shape.x - (w / 2);\n                const y = shape.y - (h / 2);\n\n                const kappa = 0.5522848;\n                const ox = (w / 2) * kappa; // control point offset horizontal\n                const oy = (h / 2) * kappa; // control point offset vertical\n                const xe = x + w;           // x-end\n                const ye = y + h;           // y-end\n                const xm = x + (w / 2);       // x-middle\n                const ym = y + (h / 2);       // y-middle\n\n                context.moveTo(x, ym);\n                context.bezierCurveTo(x, ym - oy, xm - ox, y, xm, y);\n                context.bezierCurveTo(xm + ox, y, xe, ym - oy, xe, ym);\n                context.bezierCurveTo(xe, ym + oy, xm + ox, ye, xm, ye);\n                context.bezierCurveTo(xm - ox, ye, x, ym + oy, x, ym);\n                context.closePath();\n            }\n            else if (data.type === SHAPES.RREC)\n            {\n                const rx = shape.x;\n                const ry = shape.y;\n                const width = shape.width;\n                const height = shape.height;\n                let radius = shape.radius;\n\n                const maxRadius = Math.min(width, height) / 2 | 0;\n\n                radius = radius > maxRadius ? maxRadius : radius;\n\n                context.moveTo(rx, ry + radius);\n                context.lineTo(rx, ry + height - radius);\n                context.quadraticCurveTo(rx, ry + height, rx + radius, ry + height);\n                context.lineTo(rx + width - radius, ry + height);\n                context.quadraticCurveTo(rx + width, ry + height, rx + width, ry + height - radius);\n                context.lineTo(rx + width, ry + radius);\n                context.quadraticCurveTo(rx + width, ry, rx + width - radius, ry);\n                context.lineTo(rx + radius, ry);\n                context.quadraticCurveTo(rx, ry, rx, ry + radius);\n                context.closePath();\n            }\n        }\n    }\n\n    /**\n     * Restores the current drawing context to the state it was before the mask was applied.\n     *\n     * @param {PIXI.CanvasRenderer} renderer - The renderer context to use.\n     */\n    popMask(renderer)\n    {\n        renderer.context.restore();\n        renderer.invalidateBlendMode();\n    }\n\n    /**\n     * Destroys this canvas mask manager.\n     *\n     */\n    destroy()\n    {\n        /* empty */\n    }\n}\n"]}